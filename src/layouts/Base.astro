---
import NavBar from "../components/NavBar.astro"
import Logo from "../components/Logo.astro"
import { ViewTransitions } from 'astro:transitions';
import '@/styles/globals.css'
import { getEntry } from "astro:content";
import { Socials } from "@/offcourse/components/Socials";

interface Props  {
  logoLink?: string;
  title: string
}


const profile = await getEntry("Profiles", "yeehaa");


const { title, logoLink = '/'} = Astro.props;
---

<html lang="en" transition:animate="none">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link href="https://assets.calendly.com/assets/external/widget.css" rel="stylesheet">
    <link
      rel="alternate"
      type="application/rss+xml"
      title={title}
      href={new URL("rss.xml", Astro.site)}
/>
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <slot name="og:data" />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="bg-white flex flex-col justify-between min-h-svh dark:bg-black print:bg-pure-white font-sans md:text-lg">
    <header class="z-10 fixed top-0 w-full">
      <NavBar><Logo class="text-1xl md:text-2xl" href={logoLink} slot="logo" /></NavBar>
    </header>
    <slot name="hero"/>
    <main transition:animate="fade" class="bg-white text-black dark:bg-black dark:text-white print:bg-pure-white print:text-pitch-black print:py-24 w-full lg:w-11/12 xl:w-9/12 2xl:w-8/12 mx-auto">
      <div class="flex justify-center w-full" >
      </div>
      <slot/>
    </main>
    <footer class="flex justify-between overflow-hidden dark:text-white py-8 md:py-12 px-5 mx-auto w-full lg:w-11/12 xl:w-9/12 2xl:w-8/12 print:hidden">
      <Logo/>
      <Socials {...profile.data.socials} />
    </footer>
  </body>
</html>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
 
	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
  document.addEventListener('astro:after-swap', function () {
    if (localStorage.getItem('theme') === 'dark')
    document.documentElement.classList.toggle('dark', true);
  });
</script>
